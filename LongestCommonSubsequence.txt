//execution time 0.30 on gfg (java lang)

class Solution
{
    static int lcs(int i, int j, String s1, String s2, int dp[][]){
        
        if(i == s1.length() || j == s2.length())
            return 0;
        if(dp[i][j] != -1)
            return dp[i][j];
        else if(s1.charAt(i) == s2.charAt(j)){
            return dp[i][j] = 1+lcs(i+1,j+1,s1,s2,dp);
        }
        else{
            return dp[i][j] = Math.max(lcs(i+1,j,s1,s2,dp), lcs(i,j+1,s1,s2,dp));
        }
    }
    
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        int dp[][] = new int[s1.length()][s2.length()];
        for(int i=0,len = dp.length; i<len; i++)
            Arrays.fill(dp[i], -1);
        return lcs(0,0,s1,s2,dp);
    }
    
}